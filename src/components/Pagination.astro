---
interface Props {
  currentPage: number;
  totalPages: number;
  baseUrl: string;
  maxVisiblePages?: number;
}

const { currentPage, totalPages, baseUrl, maxVisiblePages = 5 } = Astro.props;

// Calcular el rango de páginas visibles
const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

// Función para construir URL con parámetros
const buildUrl = (page: number) => {
  const url = new URL(baseUrl, Astro.url.origin);
  url.searchParams.set('page', page.toString());
  return url.toString();
};
---

<nav class="flex justify-center mt-12" aria-label="Pagination">
  <div class="flex items-center space-x-2 flex-wrap justify-center">
    {/* Botón anterior */}
    {
      currentPage > 1 && (
        <a
          href={buildUrl(currentPage - 1)}
          class="px-4 py-2 text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-orange-300 hover:text-white transition-colors flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"
            />
          </svg>
          Anterior
        </a>
      )
    }

    {/* Primera página y elipsis */}
    {
      startPage > 1 && (
        <>
          <a
            href={buildUrl(1)}
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-600 bg-white hover:bg-orange-300 hover:text-white transition-colors"
          >
            1
          </a>
          {startPage > 2 && <span class="px-2 py-2 text-gray-500">...</span>}
        </>
      )
    }

    {/* Números de página */}
    {
      Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i).map((pageNum) => (
        <a
          href={buildUrl(pageNum)}
          class={`px-4 py-2 border rounded-md transition-colors ${
            pageNum === currentPage
              ? 'text-white bg-orange-400 border-orange-400 font-medium'
              : 'text-gray-600 bg-white border-gray-300 hover:bg-orange-300 hover:text-white transition-colors'
          }`}
        >
          {pageNum}
        </a>
      ))
    }

    {/* Última página y elipsis */}
    {
      endPage < totalPages && (
        <>
          {endPage < totalPages + 1 && <span class="px-2 py-2 text-gray-500">...</span>}
          <a
            href={buildUrl(totalPages)}
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-600 bg-white hover:bg-orange-300 hover:text-white transition-colors"
          >
            {totalPages}
          </a>
        </>
      )
    }

    {/* Botón siguiente */}
    {
      currentPage < totalPages && (
        <a
          href={buildUrl(currentPage + 1)}
          class="px-4 py-2 text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-orange-300 hover:text-white transition-colors flex items-center"
        >
          Siguiente
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 ml-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"
            />
          </svg>
        </a>
      )
    }
  </div>
</nav>

<style>
  /* Estilos responsivos para móviles */
  @media (max-width: 640px) {
    .flex-wrap {
      gap: 0.5rem;
    }

    .space-x-2 > :not([hidden]) ~ :not([hidden]) {
      --tw-space-x-reverse: 0;
      margin-right: calc(0.5rem * var(--tw-space-x-reverse));
      margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
    }
  }
</style>
